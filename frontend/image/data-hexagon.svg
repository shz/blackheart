<!doctype html>
<html>
  <head></head>
  <body>
    <svg xmlns="http://www.w3.org/2000/svg">
      <script>
        var make = function(t, attr) {
          var el = document.createElementNs(svg.namespaceURI, t);
          for (var i in attr) if (attr.hasOwnProperty(i))
            el.setAttribute(i, attr[i]);
          return el;
        };

        // Constants
        var svg = document.documentElement;

        // Layout properties
        var edgeCount = 5;
        var triangleWidth = 50;
        var triangleHeight = 50;
        var trianglePadding = 4;

        // Calculated layout properties
        var sectionWidth = edgeCount * triangleWidth;
        var sectionHeight = 0;

        // Color positions
        var colorPositions = [
          [0, 0, '#000000'],
          [0, 1, '#00FF00'],
          [1, 0, '#0000FF'],
          [1, 1, '#FF0000']
        ];

        // Color state machine, tracks absolute position
        var color = {
          rot: 0,
          getColor: function(x, y) {
            return '#FF0000';
          }
        };

        // Fills out a section
        var fillSection = function(r, c, x, y) {

          // Do a single row
          for (var i=0; i<c; ++) {
            // Triangle top-left point
            var tx = x + (i * trianglePadding * 2) + (i * triangleWidth);

            // Make bottom-pointing triangle
            var points = [
              [tx, y].join(','),
              [tx + triangleWidth, y].join(','),
              [tx + triangleWidth / 2, y + triangleHeight].join(',')
            ];
            r.appendChild(make('polygon', {
              'fill': getColor(TODO),
              'points': points.join(' ')
            }));

            // Make top-pointing triangle
            if (i > 0) {
              points = [
                [tx - trianglePadding, y].join(','),
                [tx + triangleWidth / 2 - trianglePadding, y + triangleHeight].join(','),
                [tx - triangleWidth / 2 - trianglePadding, y + triangleHeight].join(',')
              ];
              r.appendChild(make('polygon', {
                'fill': getColor(TODO),
                'points': points.join(' ')
              }));
            }
          }

          // Keep recursing down if there was more than 1 triangle to draw
          if (c > 1) {
            fillSection(r, c-1,
              x + triangleWidth + trianglePadding * 2,
              y + triangleHeight + trianglePadding
            );
          }
        };

        // Build in sections
        for (var i=0; i<6; i++) {

          // Update the color SM's rotation info
          color.rot = i * 60;

          // Root section element
          var section = make('g', {
            'class': 'section',
            'transform': 'translate(' + (sectionWidth / -2) + ', -' + sectionHeight
                       + 'rotate(' + (i * 60) + 'deg)'
                       ,
            'width': sectionWidth,
            'height': sectionHeight
          });
          svg.appendChild(section);

          // Fill out the interior triangles
          fillSection(section, edgeCount, 0, 0);
        }
      </script>
    </svg>
  </body>
</html>
